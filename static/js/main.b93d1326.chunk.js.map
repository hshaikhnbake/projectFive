{"version":3,"sources":["firebase.js","header.js","button.js","listings.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","Header","className","React","Component","Button","clickHandler","event","userSelection","target","value","setState","props","handleFilter","state","onClick","this","Listings","src","listings","img1","alt","img1alt","id","address","city","bedrooms","price","neighbourhood","App","filterListings","copyofListings","filteredListings","filter","type","console","log","database","ref","on","response","data","val","key","push","map","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"wXAeAA,IAASC,cATc,CACnBC,OAAQ,0CACRC,WAAY,qCACZC,YAAa,4CACbC,UAAW,qBACXC,cAAe,iCACfC,kBAAmB,eACnBC,MAAO,8CAKIR,QAAf,ECUeS,E,uKApBP,OACI,yBAAKC,UAAU,UACX,yBAAKA,UAAU,WACX,gCACI,yBAAKA,UAAU,mBACX,4BACI,0BAAMA,UAAU,SAAhB,WAAsC,6BACtC,0BAAMA,UAAU,cAAhB,KACE,0BAAMA,UAAU,QAAhB,aAAuC,6BACrC,0BAAMA,UAAU,QAAhB,MAFJ,oB,GAVXC,IAAMC,WC2BZC,E,kDA5BX,aAAgB,IAAD,8BACX,gBAKJC,aAAe,SAACC,GACZ,IAAIC,EAAgBD,EAAME,OAAOC,MACjC,EAAKC,SAAS,CACVH,kBACD,WACC,EAAKI,MAAMC,aAAa,EAAKC,MAAMN,mBATvC,EAAKM,MAAQ,CACTN,cAAe,IAHR,E,qDAgBX,OACA,oCACI,yBAAKN,UAAU,oBACX,4BAAQQ,MAAM,QAAQK,QAASC,KAAKV,cAApC,eACA,4BAAQI,MAAM,QAAQK,QAASC,KAAKV,cAApC,cACA,4BAAQI,MAAM,MAAMK,QAASC,KAAKV,cAAlC,kB,GAvBKH,IAAMC,WCsBZa,E,uKAjBP,OACI,yBAAKf,UAAU,6BACX,4BACI,yBAAKgB,IAAKF,KAAKJ,MAAMO,SAASC,KAAMC,IAAKL,KAAKJ,MAAMO,SAASG,UAC7D,wBAAIC,GAAIP,KAAKJ,MAAMO,SAASI,IACxB,uBAAGrB,UAAU,WAAWc,KAAKJ,MAAMO,SAASK,SAC5C,2BAAIR,KAAKJ,MAAMO,SAASM,KAAxB,QACA,wCAAcT,KAAKJ,MAAMO,SAASO,UAClC,2BAAIV,KAAKJ,MAAMO,SAASQ,OACxB,6CAAmBX,KAAKJ,MAAMO,SAASS,sB,GAZxCzB,IAAMC,WCgGdyB,E,kDA/Eb,aAAe,IAAD,8BACZ,gBASFC,eAAiB,SAACtB,GAChB,IAAMuB,EAAc,YAAO,EAAKjB,MAAMK,UAEtC,GAAsB,QAAlBX,EAAJ,CAUA,IAAMwB,EAAmBD,EAAeE,QAAQ,SAACd,GAE/C,OADkBA,EAASe,OACJ1B,KAKzB2B,QAAQC,IAAIJ,GACZ,EAAKrB,SAAS,CACZqB,0BAlBA,EAAKrB,SAAS,CACZqB,iBAAkBD,KAbtB,EAAKjB,MAAQ,CACXK,SAAU,GACVa,iBAAkB,IAJR,E,gEAsCO,IAAD,OAGJxC,EAAS6C,WAAWC,MAC5BC,GAAG,SAAS,SAACC,GACjB,IAAMrB,EAAW,GACXsB,EAAOD,EAASE,MAEtB,IAAK,IAAIC,KAAOF,EACdtB,EAASyB,KAAKH,EAAKE,IAGrB,EAAKhC,SAAS,CACZQ,WACAa,iBAAmBb,S,+BAOvB,OACE,yBAAKjB,UAAU,OAEb,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAQW,aAAcG,KAAKc,iBAC3B,yBAAK5B,UAAU,qBACVc,KAAKF,MAAMkB,iBAAiBa,KAAI,SAAC1B,GAChC,OACE,kBAAC,EAAD,CAAUA,SAAUA,QAI5B,iF,GA1EUhB,IAAMC,WCNJ0C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL5B,QAAQ4B,MAAMA,EAAMC,a","file":"static/js/main.b93d1326.chunk.js","sourcesContent":["// firebase.js\nimport firebase from 'firebase/app';\nimport 'firebase/database';\n\n// Initialize Firebase\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyAIHnojzxyvYYd3bXsdxmK0tWKkxMo3EU0\",\n    authDomain: \"listings-app-a37e3.firebaseapp.com\",\n    databaseURL: \"https://listings-app-a37e3.firebaseio.com\",\n    projectId: \"listings-app-a37e3\",\n    storageBucket: \"listings-app-a37e3.appspot.com\",\n    messagingSenderId: \"252066445067\",\n    appId: \"1:252066445067:web:665f836967657449eed40e\"\n};\nfirebase.initializeApp(firebaseConfig);\n\n\nexport default firebase;","import React from 'react';\nimport './App.css';\n\n\n\nclass Header extends React.Component {\n\n    render() {\n        return (\n            <div className=\"Header\">\n                <div className=\"wrapper\">\n                    <header>\n                        <div className=\"headerContainer\">\n                            <h1>\n                                <span className=\"fancy\">Luxury </span><br></br>\n                                <span className=\"realEstate\">\n                                Re<span className=\"thin\">al Estate</span><br></br>\n                                    <span className=\"thin\">Re</span>defined\n                                </span>\n                            </h1>\n                        </div>\n                    </header>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Header;","import React from 'react';\n\nclass Button extends React.Component {\n\n    constructor () {\n        super ();\n        this.state = {\n            userSelection :'',\n        }\n    }\n    clickHandler = (event) => {\n        let userSelection = event.target.value;\n        this.setState({\n            userSelection\n        }, () => {\n            this.props.handleFilter(this.state.userSelection);\n        })\n    }\n    \n    render() {\n        return (\n        <>\n            <div className=\"buttonsContainer\">\n                <button value=\"Condo\" onClick={this.clickHandler}>View Condos</button>\n                <button value=\"House\" onClick={this.clickHandler}>View Homes</button>\n                <button value=\"All\" onClick={this.clickHandler}>View All</button>\n            </div>\n        </>\n        )\n    }\n}\n\nexport default Button;","import React from 'react';\n\n\n\nclass Listings extends React.Component {\n    \n    render() {\n        return (\n            <div className=\"listingsContainer wrapper\">\n                <ul>\n                    <img src={this.props.listings.img1} alt={this.props.listings.img1alt}></img>\n                    <li id={this.props.listings.id}>\n                        <p className=\"address\">{this.props.listings.address}</p>\n                        <p>{this.props.listings.city}, ON</p>\n                        <p>Bedrooms: {this.props.listings.bedrooms}</p>\n                        <p>{this.props.listings.price}</p>\n                        <p>Neighbourhood: {this.props.listings.neighbourhood}</p>\n                    </li>\n                </ul>\n            </div>\n        )\n    }\n}\n\nexport default Listings;","import React from 'react';\nimport './setup.css'; \nimport './App.css';\nimport './index.css';\nimport './listings.css';\nimport './header.css';\n\n\n\nimport firebase from './firebase'\nimport Header from './header.js'\nimport Button from './button.js'\nimport Listings from './listings.js'\n\n//All listing images Courtesy of the Toronto Real Estate Board, All Rights Reseved. Addresses have been obscured to protect identity. \n\n\n\nclass App extends React.Component {\n\n// Constructor Holding Listings and Filtered Listings\n  constructor() {\n    super();\n    this.state = {\n      listings: [],\n      filteredListings: [],\n    }\n  }\n\n  //filterListings is handling our userSelection state we have set in button.js. It's function is to match the user's selection to the listing type\n\n  filterListings = (userSelection) => {\n    const copyofListings = [...this.state.listings];\n    \n    if (userSelection === \"All\") {\n      this.setState({\n        filteredListings: copyofListings\n      })\n      return\n    } \n\n    \n    \n\n    const filteredListings = copyofListings.filter( (listings) => {\n      let listingType = listings.type\n      return listingType === userSelection;\n      // if (listingType === userSelection) {\n      //   return listingType = \"Condo\"\n      // }\n    }) \n    console.log(filteredListings)\n    this.setState({\n      filteredListings\n    })\n\n  }\n\n  //Grabbing Data from Firebase\n  componentDidMount() {\n\n    // Here we create a variable that holds a reference to our database\n    const dbRef = firebase.database().ref();\n    dbRef.on('value', (response) => {\n      const listings = [];\n      const data = response.val();\n\n      for (let key in data) {\n        listings.push(data[key]);\n      }\n\n      this.setState({\n        listings,\n        filteredListings : listings,\n      });\n    });\n  }\n  \n  //Rendering App on Page\n  render() {\n    return (\n      <div className=\"App\">\n\n        <Header />\n        <Button handleFilter={this.filterListings} />\n        <div className=\"listingsContainer\">\n            {this.state.filteredListings.map((listings) => {\n              return (\n                <Listings listings={listings} />\n              )\n            })}\n        </div>\n        <footer>\n          Created in Juno College. Copyright 2020. \n        </footer>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}